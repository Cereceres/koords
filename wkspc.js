

 //  const points = [ [ 0, 1 / 2 ], [ 1 / 2, 0 ], [ -1 / 2, 0 ], [ 0, -1 / 2 ] ];

console.log([0,1].angle]);

/*
const koords = require('./index');
const permutations=[[[3/2, 3/2], [-1, 1], [-(3/2), -(3/2)], [1, 0]],[[3/2, 3/2], [-1,1], [1, 0], [-(3/2), -(3/2)]]];
const polygons=permutations.slice(1 ,2 );
console.log(polygons);
const points = [ [ 0, 1 / 16 ], [ 1 / 16, 0 ] ];

const queryOnePointInAllPermutations = (point) => polygons
    .map((permutation) => koords.containsLocation(permutation, point))
    .every((result) => result);

const queryAllPointsContained = points.every(queryOnePointInAllPermutations);
const result= queryAllPointsContained

[[[3/2, 3/2], [-1, 1], [-(3/2), -(3/2)], [1, 0]],
 [[3/2, 3/2], [-1,1], [1, 0], [-(3/2), -(3/2)]],
  [[3/2, 3/2], [-(3/2), -(3/2)], [-1, 1], [1, 0]],
  [[3/2, 3/2], [-(3/2), -(3/2)], [1, 0], [-1, 1]],
   [[3/2, 3/2], [1, 0], [-1, 1], [-(3/2), -(3/2)]],
   [[3/2, 3/2], [1,0], [-(3/2), -(3/2)], [-1, 1]],
    [[-1, 1], [3/2, 3/2], [-(3/2), -(3/2)], [1, 0]],
  [[-1, 1], [3/2, 3/2], [1,0], [-(3/2), -(3/2)]],
 [[-1, 1], [-(3/2), -(3/2)], [3/2, 3/2], [1,0]],
  [[-1, 1], [-(3/2), -(3/2)], [1, 0], [3/2, 3/2]],
   [[-1, 1], [1, 0], [3/2, 3/2], [-(3/2), -(3/2)]],
    [[-1, 1], [1, 0], [-(3/2), -(3/2)], [3/2, 3/2]],
     [[-(3/2), -(3/2)], [3/2, 3/2], [-1, 1], [1, 0]],
  [[-(3/2), -(3/2)], [3/2, 3/2], [1, 0], [-1, 1]],
  [[-(3/2), -(3/2)], [-1, 1], [3/2, 3/2], [1, 0]],
  [[-(3/2), -(3/2)], [-1, 1], [1, 0], [3/2, 3/2]],
  [[-(3/2), -(3/2)], [1, 0], [3/2, 3/2], [-1,1]],
 [[-(3/2), -(3/2)], [1, 0], [-1, 1], [3/2, 3/2]],
  [[1, 0], [3/2, 3/2], [-1, 1], [-(3/2), -(3/2)]],
   [[1, 0], [3/2, 3/2], [-(3/2), -(3/2)], [-1, 1]],
    [[1, 0], [-1, 1], [3/2, 3/2], [-(3/2), -(3/2)]],
    [[1, 0], [-1, 1], [-(3/2), -(3/2)], [3/2, 3/2]],
    [[1, 0], [-(3/2), -(3/2)], [3/2, 3/2], [-1, 1]],
     [[1,0], [-(3/2), -(3/2)], [-1, 1], [3/2, 3/2]]]
     */
